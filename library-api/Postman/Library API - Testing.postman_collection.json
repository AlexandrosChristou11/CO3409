{
	"info": {
		"_postman_id": "1c3fa9d7-6808-4cf4-ad04-63a9366bcbea",
		"name": "Library API - Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Book",
			"item": [
				{
					"name": "Get Book By Id",
					"item": [
						{
							"name": "Get Books by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.gt(0)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/book/13",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"13"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Books by Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/book/10000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"10000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Books by Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Book id is non numeric\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/book/hello",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"hello"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add new book",
					"item": [
						{
							"name": "Add new Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.gt(0)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"ABC123 x1s2x23\",\r\n    \"Year\" : 2012,\r\n    \"Loanable\" : true,\r\n    \"Quantity\": 10\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Book Copy 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Constraint error: Year between 1900-2022\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"Contraint Error\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"BI 001212\",\r\n    \"Year\" : 1800,\r\n    \"Loanable\" : true,\r\n    \"Quantity\": 3\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Book Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Quantity below 0\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"BI 0011212\",\r\n    \"Year\" : 2000,\r\n    \"Loanable\" : true,\r\n    \"Quantity\": 0.0\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Book Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Books attributes should not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"Book attributes must be defined!\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"BI 0051s022\",\r\n    \"Year\" : 2012,\r\n    \"Loanable\" : true\r\n   \r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Book Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"isbn unique constraint\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"Contraint Error\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"BI 001102\",\r\n    \"Year\" : 2012,\r\n    \"Loanable\" : true,\r\n    \"Quantity\": 8\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Authors\" : \"Lorem Ipsum\",\r\n    \"Title\" : \"Javascript, the ultimate guide\",\r\n    \"ISBN\" : \"BI 0012\",\r\n    \r\n    \"Loanable\" : true,\r\n    \"Quantity\": 3\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search book by title",
					"item": [
						{
							"name": "Get Books by Title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/book?Title=guide",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book"
									],
									"query": [
										{
											"key": "Title",
											"value": "guide"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Books by Title Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function(){\r",
											"    pm.response.to.have.status(404)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/book?Title=cyprus",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book"
									],
									"query": [
										{
											"key": "Title",
											"value": "cyprus"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Books by Title Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function(){\r",
											"    pm.response.to.have.status(422)\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/book?Title=  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book"
									],
									"query": [
										{
											"key": "Title",
											"value": "  "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit books",
					"item": [
						{
							"name": "Edit Book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Quantity can not be decreased\", function(){\r",
											"    pm.response.to.have.status(422)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"Quantity\": 2\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Quantity should be an integer\", function(){\r",
											"    pm.response.to.have.status(422)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n    \"Quantity\": 100.2\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Invalid value for Loanable\", function(){\r",
											"    pm.response.to.have.status(422)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Loanable\" : \"hello world\"\r\n  \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Correct value for Loanable\", function(){\r",
											"    pm.response.to.have.status(200)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \r\n    \"Loanable\" : true\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Contraint Error = ISBN UNIQUE\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ISBN\" : \"BI 32\"\r\n  \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Value can not be empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ISBN\" : \"  \"\r\n  \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid book id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"Book not found\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Loanable\" : false\r\n  \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/1555",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"1555"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Book Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid book id format\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"Please use a valid format for a book id\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Loanable\" : false\r\n  \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/book/edit/helloworld",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"book",
										"edit",
										"helloworld"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Student",
			"item": [
				{
					"name": "Add new student",
					"item": [
						{
							"name": "Add new Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\" : \"John Smith\",\r\n    \"YOB\" : 1998 \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Student Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Student name can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\" : \" \",\r\n    \"YOB\" : 1998 \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Student Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"YOB should be an integer\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\" : \"John Smith\",\r\n    \"YOB\" : \"Hello world!\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new Student Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Contraint error | YOB OUT OF RANGE\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\" : \"John Smith\",\r\n    \"YOB\" : 1800\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Student by Id",
					"item": [
						{
							"name": "Get Student by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student by Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student/155",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"155"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student by Id Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Student id should be an integer\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student/  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"  "
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student by Id Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Student id should not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student/  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"  "
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search by Student Name",
					"item": [
						{
							"name": "Get Student By Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"student name can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/student?Name=  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student"
									],
									"query": [
										{
											"key": "Name",
											"value": "  "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student By Name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student?Name=john",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student"
									],
									"query": [
										{
											"key": "Name",
											"value": "john"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student By Name Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student?Name=orthodoxos",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student"
									],
									"query": [
										{
											"key": "Name",
											"value": "orthodoxos"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Student By Name Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Student id should be an integer\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/student?Name=  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student"
									],
									"query": [
										{
											"key": "Name",
											"value": "  "
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit Student",
					"item": [
						{
							"name": "Edit Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"student name can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \" \",\r\n    \"YOB\" : \"1999\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/edit/ 5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"edit",
										" 5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Student Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"YOB can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"alex\",\r\n    \"YOB\" : \"  \"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/edit/ 5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"edit",
										" 5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Student Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Year must be an integer\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"alex\",\r\n    \"YOB\" : \"sads\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/edit/ 5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"edit",
										" 5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Student Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"student id does not exist \", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\");\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"alex\",\r\n    \"YOB\" : \"1999\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/edit/ 88",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"edit",
										" 88"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Student Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Name\": \"JOHN\",\r\n    \"YOB\" : \"1999\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/student/edit/ 5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"student",
										"edit",
										" 5"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Module",
			"item": [
				{
					"name": "Add new Module",
					"item": [
						{
							"name": "Add New Module",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Code\" : \"BA1234\",\r\n    \"Name\" : \"Games Concept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Module Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Module code can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Code\" : \" \",\r\n    \"Name\" : \"Games Concept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Module Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Module name can not be empty\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Code\" : \"CO1234\",\r\n    \"Name\" : \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Module Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"module code must be unique!!\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Code\" : \"co1312\",\r\n    \"Name\" : \"Games Concept\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get module by ID",
					"item": [
						{
							"name": "Get Module by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/get/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"get",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by ID Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"module does not exist\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/get/15555",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"get",
										"15555"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by ID Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"module id must be an integer\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/get/helloWorld",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"get",
										"helloWorld"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by ID Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"module id can not be empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422,404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/get/   ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"get",
										"   "
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get module by code",
					"item": [
						{
							"name": "Get Module by Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/co1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"co1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Code Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"invalid format of module code\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Code Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"module can not be empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"  "
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Code Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Moudule code does not exist in the dataset\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/co8069",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"co8069"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Code Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"module does not exist\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.message).to.string(\"\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/module/co7896",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"co7896"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seach module by name",
					"item": [
						{
							"name": "Get Module by Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful GET request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/module?Name=games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module"
									],
									"query": [
										{
											"key": "Name",
											"value": "games"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Name Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"module name can not be empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.error).to.string(\"\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/module?Name=  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module"
									],
									"query": [
										{
											"key": "Name",
											"value": "  "
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Module by Name Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Module not found\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/library/module?Name=helloworld",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module"
									],
									"query": [
										{
											"key": "Name",
											"value": "helloworld"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit Module",
					"item": [
						{
							"name": "Edit Module",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Module code not in dataset\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"CO2721\",\r\n    \"Name\" : \"New Module Name\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO99999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Module name is not given\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.error).to.string(\"\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"CO2121\"\r\n    \r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Module name must not be empty\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.error).to.string(\"\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Name\" : \"  \"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"New value for module code must not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"  \",\r\n    \"Name\": \"New Module Name\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"module code must be unique\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"      pm.expect(jsonData.error).to.string(\"\")\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"CO2121\",\r\n    \"Name\" : \"New\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO1234",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO1234"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"co1115\",\r\n    \"Name\" : \"Hello Wolrd\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/co1118",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"co1118"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Module code on request can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"co8745\",\r\n    \"Name\" : \"Hello Wolrd\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"  "
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Module Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"Code\" : \"co8745\",\r\n    \"Name\" : \"Hello Wolrd\"\r\n    \r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/module/edit/CO18974",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"module",
										"edit",
										"CO18974"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Bibliography",
			"item": [
				{
					"name": "Add new Bibliography",
					"item": [
						{
							"name": "Add New Bibliography",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"co1312\",\r\n    \"BookID\" : \"5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Bibliography Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 - Values not found\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"CO9975\",\r\n    \"BookID\" : \"88895\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Bibliography Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409 \", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Ivalid format of values\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"CO1978\",\r\n    \"BookID\" : \"hello world\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Bibliography Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409 \", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Values can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \" \",\r\n    \"BookID\" : \"2\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get by Module Code",
					"item": [
						{
							"name": "Get Bibliographies by Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliographies/get/co1312",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliographies",
										"get",
										"co1312"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bibliographies by Code Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Module code does not exist\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliographies/get/co71545",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliographies",
										"get",
										"co71545"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bibliographies by Code Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Module code does not exist in a bibliography\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliographies/get/CO1315",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliographies",
										"get",
										"CO1315"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bibliographies by Code Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Module code can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliographies/get/ 123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliographies",
										"get",
										" 123"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful DELETE request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"co1312\",\r\n    \"BookID\" : 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Module code does not exist\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"CO90901\",\r\n    \"BookID\" : 222\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid combination\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"CO1020\",\r\n    \"BookID\" : 3\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"delete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Error, empty values\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([409]);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ModuleCODE\" : \"  \",\r\n    \"BookID\" :1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/bibliography/delete",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"bibliography",
										"delete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Bibliographies",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/library/bibliographies",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"library",
								"bibliographies"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Loan",
			"item": [
				{
					"name": "Add new Loan",
					"item": [
						{
							"name": "Add New Loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"404 ERROR : NOT FOUND\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 18,\r\n    \"StudentID\":15,\r\n    \"Due\" : \"2022-04-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"EMPTY INPUTS ERROR\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 4,\r\n    \"StudentID\":5,\r\n    \"Due\" : \" \"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"invalid format of due date\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 4,\r\n    \"StudentID\":5,\r\n    \"Due\" : \"cds\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Due date can not be in the past\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 4,\r\n    \"StudentID\":5,\r\n    \"Due\" : \"2020-03-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Due date must be less than 90 days in the future\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 4,\r\n    \"StudentID\":5,\r\n    \"Due\" : \"2023-03-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Book is not loanable\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 8,\r\n    \"StudentID\":5,\r\n    \"Due\" : \"2022-03-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"No other book availables\", function(){\r",
											"     var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.error).to.string(\"\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 2,\r\n    \"StudentID\":3,\r\n    \"Due\" : \"2022-03-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Loan Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"BookID\": 13,\r\n    \"StudentID\":10,\r\n    \"Due\" : \"2022-03-22\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loan/add",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loan",
										"add"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get loans by Book Id",
					"item": [
						{
							"name": "Get Loans by BookId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/book/ 1?pending=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"book",
										" 1"
									],
									"query": [
										{
											"key": "pending",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by BookId Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET METHOD RETURNS 404 - BOOK NOT FOUND\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/book/ 1000?pending=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"book",
										" 1000"
									],
									"query": [
										{
											"key": "pending",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by BookId Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid format - not an integer\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/book/ hello",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"book",
										" hello"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by BookId Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid format - can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/book/  ",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"book",
										"  "
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get by Student Id",
					"item": [
						{
							"name": "Get Loans by Student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/student/2?pending=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"student",
										"2"
									],
									"query": [
										{
											"key": "pending",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by Student Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"GET METHOD RETURNS 404 - STUDENT NOT FOUND\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/student/88?pending=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"student",
										"88"
									],
									"query": [
										{
											"key": "pending",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by Student Id Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid format - not an integer\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/student/HELLO?pending=false",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"student",
										"HELLO"
									],
									"query": [
										{
											"key": "pending",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Loans by Student Id Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Values mapping does not correspond to a record\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/student/5?pending=true",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"student",
										"5"
									],
									"query": [
										{
											"key": "pending",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit loans",
					"item": [
						{
							"name": "Edit Loan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"loan id does not exist\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\r\n    \"returned\" :  \"false\"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1000",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Loan id should be an integer\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\r\n    \"returned\" :  \"false\"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/hello",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"hello"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Update values can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \r\n    \"returned\" :  \" \"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Due date can not be in the past\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"due\" : \"2022-02-10\",\r\n    \"returned\" :  \"true\"\r\n    \r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Due date can notmore than 90 days from checkout date\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"due\" : \"2023-02-10\",\r\n    \"returned\" :  \"false\"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Update values can not be empty\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([422]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\r\n    \"returned\" :  \"  \"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Loan Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n\r\n    \"returned\" :  \"true\"\r\n\r\n    \r\n \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/library/loans/edit/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"library",
										"loans",
										"edit",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Loans",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/library/loans",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"library",
								"loans"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}